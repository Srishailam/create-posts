{"version":3,"sources":["components/User/Logout/Logout.js","actions/userActions.js","components/User/Login/Login.js","components/User/Register/Register.js","components/User/UserBar/UserBar.js","components/Post/CreatePost/CreatePost.js","actions/postActions.js","components/Post/Post/Post.js","components/Post/PostList/PostList.js","reducers/userReducer.js","reducers/postsReducer.js","reducers/appReducer.js","App.js","serviceWorker.js","index.js"],"names":["Logout","user","dispatch","className","onSubmit","e","preventDefault","type","value","Login","useState","userName","setuserName","loginAction","htmlFor","id","name","onChange","target","autoComplete","disabled","length","Register","setUserName","password","setPassword","passwordRepeat","setPasswordRepeat","registerAction","UserBar","CreatePost","posts","title","setTitle","content","setContent","resetCreatePostForm","author","creatPostAction","Post","PostList","map","eachPost","i","key","userReducer","state","action","postsReducer","appReducer","defaultPosts","App","useReducer","useEffect","document","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a7c7a9c8.chunk.js","sourcesContent":["import React from 'react';\nimport { logoutAction } from '../../../actions/userActions';\n\nconst Logout = ({ user, dispatch }) => {\n\n  return (\n    <div className=\"Logout\">\n      <form onSubmit={e => { e.preventDefault(); dispatch(logoutAction()); }}>\n        Logged In as: <b>{user}</b>\n        <input type=\"submit\" value=\"Logout\" />\n      </form>\n    </div>\n  );\n}\n\nexport default Logout;","export const loginAction = (userName) => ({ type: 'LOGIN', userName });\nexport const logoutAction = () => ({ type: 'LOGOUT' });\nexport const registerAction = (userName) => ({ type: 'REGISTER', userName });","import React, { useState } from 'react';\n\nimport { loginAction } from '../../../actions/userActions';\n\n\nconst Login = ({ dispatch }) => {\n\n  const [userName, setuserName] = useState('')\n  const handleUserName = (e) => {\n    setuserName(e.target.value);\n  }\n  return (\n    <div className=\"Login\">\n      <form onSubmit={e => { e.preventDefault(); dispatch(loginAction(userName)); }}>\n        <label htmlFor=\"Login_UserName\">User Name:</label>\n        <input id=\"Login_UserName\" type=\"text\" name=\"Login_UserName\" onChange={handleUserName} value={userName} autoComplete=\"off\" />\n        <label htmlFor=\"Login_Password\" autoComplete=\"off\">Password:</label>\n        <input id=\"Login_Password\" type=\"password\" name=\"Login_Password\" />\n        <input type=\"submit\" value=\"Login\" disabled={userName.length === 0} />\n      </form>\n    </div>\n  );\n}\n\nexport default Login;","import React, { useState } from 'react';\nimport { registerAction } from '../../../actions/userActions';\n\nconst Register = ({ dispatch }) => {\n  const [userName, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordRepeat, setPasswordRepeat] = useState('')\n  const handleUserName = (e) => {\n    setUserName(e.target.value);\n  }\n  const handlePassword = (e) => {\n    setPassword(e.target.value);\n  }\n  const handlePasswordRepeat = (e) => {\n    setPasswordRepeat(e.target.value);\n  }\n  return (\n    <div className=\"Register\">\n      <form onSubmit={e => { e.preventDefault(); dispatch(registerAction(userName)); }}>\n        <label htmlFor=\"Register_UserName\">User Name:</label>\n        <input id=\"Register_UserName\" type=\"text\" name=\"Register_UserName\" value={userName} onChange={handleUserName} autoComplete=\"off\" />\n        <label htmlFor=\"Register_Password\">Password:</label>\n        <input id=\"Register_Password\" type=\"password\" name=\"Register_Password\" autoComplete=\"off\" value={password} onChange={handlePassword} />\n        <input id=\"Register_Password_Repeat\" type=\"password\" name=\"Register_Password_Repeat\" autoComplete=\"off\" value={passwordRepeat} onChange={handlePasswordRepeat} />\n        <input type=\"submit\" value=\"Register\"\n          disabled={userName.length === 0 || password !== passwordRepeat}\n        />\n      </form>\n    </div>\n  );\n}\n\nexport default Register;","import React, { useState } from 'react';\nimport Logout from '../Logout/Logout';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\n\nconst UserBar = ({user, dispatch}) => {\n  const renderContent = () => {\n    if (user) {\n      return <Logout user={user} dispatch={dispatch}/>\n    } else {\n      return (\n        <>\n          <Login dispatch={dispatch}/>\n          <Register dispatch={dispatch}/>\n        </>\n      )\n    }\n  }\n  return (\n    <div className=\"UserBar\">\n      {renderContent()}\n    </div>\n  );\n}\n\nexport default UserBar;","import React, { useState } from 'react';\nimport { creatPostAction } from '../../../actions/postActions';\n\nconst CreatePost = ({ user, posts, dispatch }) => {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n\n  const handleContentChange = (e) => {\n    setContent(e.target.value);\n  }\n  const handleTitleChange = (e) => {\n    setTitle(e.target.value);\n  }\n  const handleCreate = () => {\n    const author = user;\n    dispatch(creatPostAction(title, content, author));\n    resetCreatePostForm();\n  }\n  const resetCreatePostForm = () => {\n    setTitle('');\n    setContent('');\n  }\n  return (\n    <div className=\"CreatePost\">\n      <form onSubmit={e => { e.preventDefault(); handleCreate(); }}>\n        <div className=\"CreatePost_Auther\">Author:<b>{user}</b></div>\n        <div>\n          <label htmlFor=\"CreatePost_Title\">Title:</label>\n          <input autoComplete=\"off\" id=\"CreatePost_Title\" type=\"text\" name=\"CreatePost_Title\" value={title} onChange={handleTitleChange} />\n        </div>\n        <div>\n          <label htmlFor=\"CreatePost_Contet\">Content:</label>\n          <textarea id=\"CreatePost_Contet\" autoComplete=\"off\" value={content} onChange={handleContentChange} />\n        </div>\n        <input type=\"submit\" value=\"Create\" disabled={title.length === 0 || content.length === 0} />\n      </form>\n    </div>\n  );\n}\n\nexport default CreatePost;","export const creatPostAction = (title, content, author) => ({ type: 'CREATE_POST', title, content, author });","import React from 'react';\n\nconst Post = ({ title, content, author}) => {\n\n  return (\n    <div className=\"Post\">\n      <h3>{title}</h3>\n      <div>{content}</div>\n      <br/>\n      <i>written by <b>{author}</b></i>\n    </div>\n  );\n}\n\nexport default Post;","import React from 'react';\nimport Post from '../Post/Post';\n\nconst PostList = ({ posts = [] }) => {\n  const renderPosts = () => {\n    return posts.map((eachPost, i) => (\n      <Post\n        key={i}\n        title={eachPost.title}\n        content={eachPost.content}\n        author={eachPost.author}\n      />\n    ));\n  }\n  return (\n    <div className=\"PostList\">\n      {renderPosts()}\n    </div>\n  );\n}\n\nexport default PostList;","export default function userReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN':\n    case 'REGISTER':\n      return action.userName;\n    case 'LOGOUT':\n      return '';\n    default:\n      return state;\n  }\n}","export default function postsReducer(state, action) {\n  switch (action.type) {\n    case 'CREATE_POST':\n      const newPost = {\n        title: action.title,\n        content: action.content,\n        author: action.author\n      }\n\n      return [newPost, ...state];\n    default:\n      return state;\n  }\n}","import userReducer from \"./userReducer\";\nimport postsReducer from \"./postsReducer\";\n\nexport default function appReducer(state, action) {\n  return {\n    user: userReducer(state.user, action),\n    posts: postsReducer(state.posts, action)\n  }\n}","import React, { useReducer, useEffect } from 'react';\n\nimport UserBar from './components/User/UserBar/UserBar';\nimport CreatePost from './components/Post/CreatePost/CreatePost';\nimport PostList from './components/Post/PostList/PostList';\nimport appReducer from './reducers/appReducer';\n\nconst defaultPosts = [\n  { title: 'React Hooks', content: 'The greatest thing since sliced bread!', author: 'Daniel Bugl' },\n  { title: 'Using React Fragments', content: 'Keeping the DOM tree clean!', author: 'Daniel Bugl' }\n];\n\n\nfunction App() {\n  const [state, dispatch] = useReducer(appReducer, { user: '', posts: defaultPosts });\n  const { user, posts } = state;\n\n  useEffect(() => {\n    if (user) {\n      document.title = `${user} - React Hooks Blog`;\n    } else {\n      document.title = `Welcome - React Hooks Blog`;\n    }\n  }, [user])\n\n  return (\n    <div className=\"App\">\n      <UserBar user={user} dispatch={dispatch} />\n      <br />\n      {user && <CreatePost user={user} posts={posts} dispatch={dispatch} />}\n      <br />\n      <PostList posts={posts} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}